plot.margin=grid::unit(c(0.3,0,40,0), "mm")
)+
facet_grid('metric'~'Setting')+
guides(color=guide_legend(nrow=2, byrow=TRUE))
p2
p2 <- ggplot(dat_cp_processed, aes(x=init, y=value, fill=init))+
geom_boxplot()+theme(
# legend.direction="vertical",
legend.title = ,
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=18, face="bold"),
text=element_text(size=18),
legend.text = element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="black", size=0, angle = 0),
strip.text.y = element_blank(),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,40,0), "mm")
)+
facet_grid('metric'~'Setting')+
guides(color=guide_legend(nrow=2, byrow=TRUE))
p2
p2 <- ggplot(dat_cp_processed, aes(x=init, y=value, fill=init))+
geom_boxplot()+theme(
# legend.direction="vertical",
legend.title = ,
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=18, face="bold"),
text=element_text(size=18),
legend.text = element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="black", size=0, angle = 0),
strip.text.y = element_blank(),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,40,0), "mm")
)+
facet_grid('metric'~'Setting')+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p2
p2 = ggboxplot(dat_cp_processed, x='init', y='value', fill='init',alpha=0.8,
palette = my_colors[1:4],labs='g',
ggtheme = theme(
# legend.direction="vertical",
legend.title = ,
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=18, face="bold"),
text=element_text(size=18),
legend.text = element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="black", size=0, angle = 0),
strip.text.y = element_blank(),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,40,0), "mm")
)
)+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p2
p2=ggpar(p2, legend.title = "")
# Arrange
# ::::::::::::::::::::::::::::::::::::::::::::::::::
ggarrange(p_cp1, p_cp2, ncol = 2, common.legend = 1,
legend.grob = get_legend(p2), legend = 'bottom')
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =4, height = 4)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =6, height = 6)
####################
#### K ############
######################
curr_dir <- "C:/Users/test/Dropbox/tml/IHS/simu/simu/output/final_perf"
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =6, height = 6)
p2 = ggboxplot(dat_cp_processed, x='init', y='value', fill='init',alpha=0.8,
palette = my_colors[1:4],labs='g',
ggtheme = theme(
# legend.direction="vertical",
legend.title = ,
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(size=16),
legend.text = element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="black", size=0, angle = 0),
strip.text.y = element_blank(),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,40,0), "mm")
)
)+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p2
p2=ggpar(p2, legend.title = "")
##################################################
ylims = list(c(0, 0.18),c(0.25,1), c(0, 0.20),NULL)
p_cp1 <- ggboxplot(dat_cp_processed[dat_cp_processed$compare == "setting1" & dat_cp_processed$Setting == "Piecewise Constant",],
x = "init", y = "value",alpha=0.8,xlab = FALSE, ylab = "Estimation Performance",
fill = "init", palette = my_colors[1:3],title = "Oracle Change Point+Random Change Point",
facet.by =c('metric','Setting'), scales = 'free_y',
ggtheme = theme(
# legend.direction="vertical",
legend.position = "None",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="white", size=0, angle = 0),
strip.text.x = element_blank(),
strip.text.y = element_blank(),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,8,0), "mm")
),
ncol=1
)
scale_inidividual_facet_y_axes(p_cp1, ylims = ylims)
# facet(p_cp1,  facet.by = 'metric',ncol = 1)
p_cp1
# bxp+scale_fill_manual(values=cbPalette[c(1,2,5)])
# Dot plot
p_cp2 <- ggboxplot(dat_cp_processed[dat_cp_processed$compare == "setting2"&dat_cp_processed$Setting=="Piecewise Constant",],
x = "init", y = "value", alpha=0.8,ylab=0, xlab = 0,title = "Oracle Change Point+No Change Point",
fill = "init", palette = my_colors[c(1,2,4)],
facet.by =c('metric','Setting'),scales = 'free',
ggtheme = theme(
# legend.direction="vertical",
legend.position = "None",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="white", size=0, angle = 0),
strip.text.x = element_blank(),
axis.text.y=element_text(colour="white", size=0),
plot.margin=grid::unit(c(0.3,0,8,0), "mm")
),
ncol=1)
p_cp2
scale_inidividual_facet_y_axes(p_cp2, ylims = ylims)
# Arrange
# ::::::::::::::::::::::::::::::::::::::::::::::::::
ggarrange(p_cp1, p_cp2, ncol = 2, common.legend = 1,
legend.grob = get_legend(p2), legend = 'bottom')
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =6, height = 6)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =10, height = 1-)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =10, height = 10)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =10, height = 10)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =7, height = 7)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_cp",Sys.Date(), ".pdf"),width =8, height = 8)
####################
#### K ############
######################
curr_dir <- "C:/Users/test/Dropbox/tml/IHS/simu/simu/output/final_perf"
p2 <- ggplot(dat2_processed[dat2_processed$Setting == 'Piecewise Constant',], aes(init, value, fill=init)) + #, color=`Effect Size`
geom_boxplot(lwd=1, fatten=1, alpha=0.8) +
labs(fill='') +
xlab("") +
ylab("Estimation Performance") +
# labs(fill="Method") +
theme(
# legend.direction="vertical",
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=20, face="bold"),
text=element_text(size=18),
legend.text=element_text(size=18),
# axis.text.x=element_text(colour="black", size=16, angle = 90),
# axis.text.x = element_blank(),
strip.text.x = element_blank(),
axis.text.x = element_text(colour="white", size=0),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,-2,0), "mm")
) +
facet_grid(facets =metric~ Setting, scales = 'free_y')
p2 +scale_fill_startrek()
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 5, height = 7)
p2 <- ggplot(dat2_processed[dat2_processed$Setting == 'Piecewise Constant',], aes(init, value, fill=init)) + #, color=`Effect Size`
geom_boxplot(lwd=1, fatten=1, alpha=0.8) +
labs(fill='') +
xlab("") +
ylab("Estimation Performance") +
# labs(fill="Method") +
theme(
# legend.direction="vertical",
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(16),
legend.text=element_text(size=16),
# axis.text.x=element_text(colour="black", size=16, angle = 90),
# axis.text.x = element_blank(),
strip.text.x = element_blank(),
axis.text.x = element_text(colour="white", size=0),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,-2,0), "mm")
) +
facet_grid(facets =metric~ Setting, scales = 'free_y')+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p2 +scale_fill_startrek()
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 5, height = 7)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 5, height = 7)
p2 <- ggplot(dat2_processed[dat2_processed$Setting == 'Piecewise Constant',], aes(init, value, fill=init)) + #, color=`Effect Size`
geom_boxplot(lwd=1, fatten=1, alpha=0.8) +
labs(fill='') +
xlab("") +
ylab("Estimation Performance") +
# labs(fill="Method") +
theme(
# legend.direction="vertical",
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(16),
legend.text=element_text(size=16),
# axis.text.x=element_text(colour="black", size=16, angle = 90),
# axis.text.x = element_blank(),
strip.text.x = element_blank(),
axis.text.x = element_text(colour="white", size=0),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,-2,0), "mm")
) +
facet_grid(facets =metric~ Setting, scales = 'free_y')+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p2 +scale_fill_startrek()
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 5, height = 7)
p2 <- ggplot(dat2_processed[dat2_processed$Setting == 'Piecewise Constant',], aes(init, value, fill=init)) + #, color=`Effect Size`
geom_boxplot(lwd=1, fatten=1, alpha=0.8) +
labs(fill='') +
xlab("") +
ylab("Estimation Performance") +
# labs(fill="Method") +
theme(
# legend.direction="vertical",
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(16),
legend.text=element_text(size=16),
# axis.text.x=element_text(colour="black", size=16, angle = 90),
# axis.text.x = element_blank(),
strip.text.x = element_blank(),
axis.text.x = element_text(colour="white", size=0),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,-2,0), "mm")
) +
facet_grid(facets =metric~ Setting, scales = 'free_y')+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
warnings()
p2 <- ggplot(dat2_processed[dat2_processed$Setting == 'Piecewise Constant',], aes(init, value, fill=init)) + #, color=`Effect Size`
geom_boxplot(lwd=1, fatten=1, alpha=0.8) +
labs(fill='') +
xlab("") +
ylab("Estimation Performance") +
# labs(fill="Method") +
theme(
# legend.direction="vertical",
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(16),
legend.text=element_text(size=16),
# axis.text.x=element_text(colour="black", size=16, angle = 90),
# axis.text.x = element_blank(),
strip.text.x = element_blank(),
axis.text.x = element_text(colour="white", size=0),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,-2,0), "mm")
) +
facet_grid(facets =metric~ Setting, scales = 'free_y')+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p2 +scale_fill_startrek()
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 5, height = 7)
p2 <- ggplot(dat2_processed[dat2_processed$Setting == 'Piecewise Constant',], aes(init, value, fill=init)) + #, color=`Effect Size`
geom_boxplot(lwd=1, fatten=1, alpha=0.8) +
labs(fill='') +
xlab("") +
ylab("Estimation Performance") +
# labs(fill="Method") +
theme(
# legend.direction="vertical",
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(size=16),
legend.text=element_text(size=16),
# axis.text.x=element_text(colour="black", size=16, angle = 90),
# axis.text.x = element_blank(),
strip.text.x = element_blank(),
axis.text.x = element_text(colour="white", size=0),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,-2,0), "mm")
) +
facet_grid(facets =metric~ Setting, scales = 'free_y')+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p2 +scale_fill_startrek()
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 7, height = 4)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 4, height = 4)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 7, height = 7)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 7, height = 7)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 5, height = 7)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 6, height = 7)
p2 <- ggplot(dat2_processed[dat2_processed$Setting == 'Piecewise Constant',], aes(init, value, fill=init)) + #, color=`Effect Size`
geom_boxplot(lwd=1, fatten=1, alpha=0.8) +
labs(fill='') +
xlab("") +
ylab("Estimation Performance") +
# labs(fill="Method") +
theme(
# legend.direction="vertical",
legend.position = "bottom",
# panel.border=element_blank(),
# legend.box.spacing=0.4,
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(size=16),
legend.text=element_text(size=16),
# axis.text.x=element_text(colour="black", size=16, angle = 90),
# axis.text.x = element_blank(),
strip.text.x = element_blank(),
axis.text.x = element_text(colour="white", size=0),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,-2,0), "mm")
) +
facet_grid(facets =metric~ Setting, scales = 'free_y')+
guides(fill=guide_legend(nrow=3, byrow=TRUE))
p2 +scale_fill_startrek()
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 6, height = 7)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/offlineIC_k",Sys.Date(), ".pdf"), width = 7, height = 7)
p_diff_av_value <- ggboxplot(dat[dat$Setting == "Piecewise Constant",],x='init', y = 'Average Value',fill = 'init', alpha=0.8,
ylab="Average Value", xlab="",lwd=1, fatten=1,
# facet.by = c('Setting'),
alpha=0.8,palette = my_colors[1:5],
ggtheme = theme(
# legend.direction="vertical",
# legend.position = "None",
legend.position = "bottom",
legend.text = element_text(size=16),
legend.margin=margin(t = 0, unit='cm'),
legend.box.margin=margin(-30,0,0,0),
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="white", size=0, angle = 0),
strip.text.x = element_blank(),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,0,0), "mm")
))#+
p_diff_av_value <- ggboxplot(dat[dat$Setting == "Piecewise Constant",],x='init', y = 'Average Value',fill = 'init', alpha=0.8,
ylab="Average Value", xlab="",lwd=1, fatten=1,
# facet.by = c('Setting'),
alpha=0.8,palette = my_colors[1:5],
ggtheme = theme(
# legend.direction="vertical",
# legend.position = "None",
legend.position = "bottom",
legend.text = element_text(size=16),
legend.margin=margin(t = 0, unit='cm'),
legend.box.margin=margin(-30,0,0,0),
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="white", size=0, angle = 0),
strip.text.x = element_blank(),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,0,0), "mm")
))+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p_diff_av_value=ggpar(p_diff_av_value, legend.title = "")
p_diff_av_value
p_diff_av_value <- ggboxplot(dat[dat$Setting == "Piecewise Constant",],x='init', y = 'Average Value',fill = 'init', alpha=0.8,
ylab="Average Value", xlab="",lwd=1, fatten=1,
# facet.by = c('Setting'),
alpha=0.8,palette = my_colors[1:5],
ggtheme = theme(
# legend.direction="vertical",
# legend.position = "None",
legend.position = "bottom",
legend.text = element_text(size=16),
legend.margin=margin(t = 0, unit='cm'),
legend.box.margin=margin(-30,0,0,0),
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.line=element_line(size=1, colour="black"),
panel.grid.major=element_line(colour="#d3d3d3"),
panel.grid.minor=element_line(colour="#d3d3d3"),
panel.background=element_blank(),
plot.title=element_text(size=16, face="bold"),
text=element_text(size=16),
# axis.text.x = element_blank(),
axis.text.x=element_text(colour="white", size=0, angle = 0),
strip.text.x = element_blank(),
axis.text.y=element_text(colour="black", size=16),
plot.margin=grid::unit(c(0.3,0,0,0), "mm")
))+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
p_diff_av_value=ggpar(p_diff_av_value, legend.title = "")
p_diff_av_value
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/diff_av_value", Sys.Date(), ".pdf"), width = 7.5, height = 7)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/diff_av_value", Sys.Date(), ".pdf"), width = 5, height = 7)
###################
# Scale individual facet y-axes
scale_inidividual_facet_y_axes = function(plot, ylims) {
init_scales_orig = plot$facet$init_scales
init_scales_new = function(...) {
r = init_scales_orig(...)
# Extract the Y Scale Limits
y = r$y
# If this is not the y axis, then return the original values
if(is.null(y)) return(r)
# If these are the y axis limits, then we iterate over them, replacing them as specified by our ylims parameter
for (i in seq(1, length(y))) {
ylim = ylims[[i]]
if(!is.null(ylim)) {
y[[i]]$limits = ylim
}
}
# Now we reattach the modified Y axis limit list to the original return object
r$y = y
return(r)
}
plot$facet$init_scales = init_scales_new
return(plot)
}
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/diff_av_value", Sys.Date(), ".pdf"), width = 5, height = 7)
ggsave(paste0("C:/Users/test/Dropbox/研究生/poster/DIRL/figures/diff_av_value", Sys.Date(), ".pdf"), width = 5, height = 5)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
